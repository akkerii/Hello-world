name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE: my-node-app
  REGION: us-central1
  REPOSITORY: my-repo
  IMAGE_URI: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-repo/my-node-app

permissions:
  contents: write
  id-token: write
  pull-requests: read

jobs:
  version-check:
    name: üî¢ Auto Version Increment
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    outputs:
      version: ${{ steps.bump-version.outputs.version }}
      should_deploy: ${{ steps.bump-version.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Auto increment version
        id: bump-version
        run: |
          cd app

          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"

          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Calculate new version based on commit message and run number
          if [[ "${{ github.event.head_commit.message }}" == *"[skip-version]"* ]]; then
            echo "Skipping version bump due to [skip-version] in commit message"
            NEW_VERSION="$CURRENT_VERSION"
          elif [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
            echo "Bumped to major version: $NEW_VERSION"
          elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            echo "Bumped to minor version: $NEW_VERSION"
          else
            # Auto-increment patch version using GitHub run number for uniqueness
            NEW_PATCH=$((PATCH + ${{ github.run_number }}))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "Auto-bumped to patch version: $NEW_VERSION"
          fi

          echo "Final version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  lint-test:
    name: üß™ Lint & Unit Tests
    runs-on: ubuntu-latest
    needs: version-check
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: cd app && npm ci

      - name: Run lint
        run: cd app && npm run lint || echo "Lint script not found, skipping..."

      - name: Run unit tests
        run: cd app && npm test || echo "Test script not found, skipping..."

  build-and-scan:
    name: üê≥ Build Docker & Vulnerability Scan
    needs: [version-check, lint-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version from previous job
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create git tag for new version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if ! git tag -l | grep -q "v${{ env.VERSION }}"; then
            git tag "v${{ env.VERSION }}"
            git push origin "v${{ env.VERSION }}" || echo "Failed to push tag, continuing..."
            echo "Created and pushed tag v${{ env.VERSION }}"
          else
            echo "Tag v${{ env.VERSION }} already exists"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & push multi-stage image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:v${{ env.VERSION }}
            ${{ env.IMAGE_URI }}:latest
        env:
          DOCKER_BUILDKIT: 1

      - name: Verify image exists
        run: |
          echo "Checking if image exists: ${{ env.IMAGE_URI }}:v${{ env.VERSION }}"
          gcloud artifacts docker images describe ${{ env.IMAGE_URI }}:v${{ env.VERSION }} || echo "Image not found in registry"

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_URI }}:v${{ env.VERSION }}
          format: "table"
        continue-on-error: true

      - name: Ensure non-root user in Dockerfile
        run: |
          if grep -q '^USER root' Dockerfile; then
            echo "::error ::Dockerfile must specify a non-root USER"  
            exit 1
          fi

  deploy:
    name: üöÄ Deploy to Cloud Run
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set version from previous job
        run: |
          VERSION="${{ needs.version-check.outputs.version }}"
          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Deploy service
        run: |
          echo "VERSION env var: '${{ env.VERSION }}'"
          echo "Available images in repository:"
          gcloud artifacts docker images list us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/my-node-app || echo "No images found"

          if [ -z "${{ env.VERSION }}" ]; then
            IMAGE_TAG="latest"
            echo "Using latest tag due to empty version"
          else
            IMAGE_TAG="v${{ env.VERSION }}"
            echo "Using version tag: $IMAGE_TAG"
          fi

          FULL_IMAGE="${{ env.IMAGE_URI }}:$IMAGE_TAG"
          echo "Deploying with image: $FULL_IMAGE"
          echo "Service: ${{ env.SERVICE }}"
          echo "Region: ${{ env.REGION }}"

          gcloud run deploy ${{ env.SERVICE }} \
            --image="$FULL_IMAGE" \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --concurrency=80

      - name: Health check (uptime probe)
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

          URL=$(gcloud run services describe ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")

          echo "Service URL: $URL"

          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "HTTP response code: $HTTP"
            if [ "$HTTP" -eq 200 ]; then
              echo "‚úÖ Health check passed"
              echo "üåê Service URL: $URL"
              exit 0
            fi
            sleep 15
          done
          echo "‚ùå Health check failed after 5 attempts" && exit 1

